from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from database import USERS, ROOMS
from services.crypto_bot import get_crypto_price
from services.gpt_bot import ask_gpt  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å services/gpt_bot.py
import json
from websocket.connection_manager import ConnectionManager

# ‡∏™‡∏£‡πâ‡∏≤‡∏á APIRouter
router = APIRouter()
manager = ConnectionManager()

# WebSocket endpoint ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
@router.websocket("/ws/{room_id}/{user_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str, user_id: str):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if room_id not in ROOMS or user_id not in USERS:
        await websocket.close(code=4000)
        return

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    await manager.connect(room_id, websocket)
    user = USERS[user_id]
    await manager.broadcast(room_id, f"üì• {user.display_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")

    try:
        # ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        while True:
            data = await websocket.receive_text()
            message = f"{user.display_name}: {data}"
            await manager.broadcast(room_id, message)

            # === üí¨ BOT LOGIC HERE ===
            response = handle_bot_response(data)
            if response:
                await manager.broadcast(room_id, f"ü§ñ ‡∏ö‡∏≠‡∏ó: {response}")

    except WebSocketDisconnect:
        # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        manager.disconnect(room_id, websocket)
        await manager.broadcast(room_id, f"üì§ {user.display_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
def handle_bot_response(text: str) -> str | None:
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if "‡∏£‡∏≤‡∏Ñ‡∏≤" in text and "BTC" in text:
        price = get_crypto_price("BTCUSDT")
        return f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {price} USDT"

    if "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" in text:
        return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏°‡∏±‡πâ‡∏¢?"

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ GPT ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö
    if len(text.strip()) > 5:
        return ask_gpt(text)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö

    return None
